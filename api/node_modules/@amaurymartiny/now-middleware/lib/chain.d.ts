import { NowRequest, NowResponse } from '@now/node';
import { RequestHandler } from 'express';
declare type AsyncVoid = void | Promise<void>;
/**
 * A ZEIT Now lambda function.
 */
export declare type NowFunction<Req, Res> = (req: Req, res: Res) => AsyncVoid;
/**
 * Chain middlewares together, and expose them to be consumed by a `@now/node`
 * serverless function.
 *
 * @param middlewares - Functions of form: `function(req, res, next) { ... }`, aka
 * express middlewares.
 */
export declare function chain<Req = NowRequest, Res = NowResponse>(...middlewares: RequestHandler[]): (fn: NowFunction<Req, Res>) => NowFunction<Req, Res>;
export {};
